// #ifndef - макрос препроцессора для исключения двойного включения
#ifndef HEADER_4A_H
#define HEADER_4A_H

#include <locale.h>
#include <stdio.h>
#include <malloc.h>

#define h1 3				// Шаг перемешивания для первого пространства ключей
#define h2 3				// Шаг перемешивания для второго пространства ключей
#define path1 ptab->space1 
#define path2 ptab->space2

typedef char *Type;            // Новый тип

typedef struct Item {
	int key1;       // Ключ элемента из 1-ого пространства ключей
	int key2;       // Ключ элемента из 2-ого пространства ключей
	int ind1;	    // Связь с элементом 1-ого пространства ключей
	int ind2;	    // Связь с элементом 2-ого пространства ключей
	int offset;		// Смещение в файле (по отношению к началу файла)
	int len;		// Длина информации
} Item;


typedef struct Table {      // Тип - Хеш-таблица с двумя пространствами ключей
	int SZ;			   // Размер таблицы
	Item *space1;      // Оба пространства организованы по принципу перемешанной таблицы, использующей перемешивание сложением
	Item *space2;
	FILE *fd;		   // Дескриптор файла, чтобы выполнять операции с файлом данных
} Table;


/**************************************************************************************************************************************************************/
/*Прототипы функций*/

/* Чет по мелочи */
int I1(int, int);									// Хеш-функция для первого пространства ключей
int I2(int, int);									// Хеш-функция для второго пространства ключей
int getInt(int*);									// Ввод целого числа из входного потока
Type getStr();										// Ввод строки произвольной длины из входного потока
void clean_stdin();									// Очистка входного потока от мусора
int dialog(const Type msgs[], int);				    // Диалог
void input(int *, int *);							// Ввод пространств ключей
Type findInfo(Item, FILE *);						// Функция нахождения информации в файле данных по ключу
void add(Item *, int, int, Type, int, int, FILE *); // Добавление элемента в пространство space1/space2 на место с индексом path
void delTable(Table *);								// Удаление пространств таблицы


/* Диалоговые функции */
int D_Add(Table *);				    // Диалоговая функция включения в таблицу нового элемента
int D_Find(Table *);				// Диалоговая функция поиска вэлемента по ключу/ключам
int D_Delete(Table *);				// Диалоговая функция удаления удаления по ключу/ключам
int D_Show(Table *);				// Диалоговая функция вывода всей таблицы


/* Табличные функции */
int insert(Table *, int, int, Type);        // Табличная функция включения в таблицу нового элемента
int find(Table *, int, int);                // Табличная функция поиска элемента по ключу/ключам
int delete(Table *, int, int);              // Табличная функция удаления элемента по ключу/ключам
int output(Item *, int, FILE *);            // Табличная функция вывода таблицы (ваааще не тавтология)


/* Для работы с файлом данных */
int D_Load(Table *);				    // Диалоговая функция загрузки таблицы из файла 
int load(Table *, Type);				// Функция создания нового файла
int create(Table *, Type, int);			// Функция загрузки существующего файла (если таковой имеется)
int save(Table *);						// Функция созранения файла данных


/**************************************************************************************************************************************************************/

#endif

